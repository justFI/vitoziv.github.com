<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | VITO]]></title>
  <link href="http://vit0.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://vit0.com/"/>
  <updated>2014-12-05T14:20:06+08:00</updated>
  <id>http://vit0.com/</id>
  <author>
    <name><![CDATA[Vito Zhang]]></name>
    <email><![CDATA[vvitozhang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 8 自适应 Cell]]></title>
    <link href="http://vit0.com/blog/2014/11/13/ios-8-zi-shi-ying-cell/"/>
    <updated>2014-11-13T23:37:00+08:00</updated>
    <id>http://vit0.com/blog/2014/11/13/ios-8-zi-shi-ying-cell</id>
    <content type="html"><![CDATA[<p>在使用 table view 的时侯经常会遇到这样的需求：table view 的 cell 中的内容是动态的，导致在开发的时候不知道一个 cell 的高度具体是多少，所以需要提供一个计算 cell 高度的算法，在每次加载到这个 cell 的时候计算出 cell 真正的高度。</p>

<h2>在 iOS 8 之前</h2>

<p>没有使用 Autolayout 的情况下，需要实现 table view delegate 的 <code>tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat</code>  方法，在这个方法中计算并返回 cell 的高度。比如，我有一个可以显示任意行数的纯文本 cell，计算 cell 的代码可以是这样：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">heightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">content</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">datas</span><span class="p">[</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="kt">as</span> <span class="n">String</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">let</span> <span class="nl">padding</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="k">let</span> <span class="n">width</span> <span class="o">=</span> <span class="n">tableView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">padding</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">CGFloat</span><span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="nl">NSFontAttributeName</span><span class="p">:</span> <span class="bp">UIFont</span><span class="p">(</span><span class="nl">name</span><span class="p">:</span> <span class="s">&quot;Helvetica&quot;</span><span class="p">,</span> <span class="nl">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">)</span><span class="o">!</span><span class="p">]</span>
</span><span class='line'><span class="k">let</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">content</span><span class="p">.</span><span class="n">boundingRectWithSize</span><span class="p">(</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">options</span><span class="p">:</span> <span class="n">NSStringDrawingOptions</span><span class="p">.</span><span class="n">UsesLineFragmentOrigin</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">attributes</span><span class="p">:</span> <span class="n">attributes</span><span class="p">,</span>
</span><span class='line'>    <span class="nl">context</span><span class="p">:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的代码是一个最简单的例子，这个例子看起来好像没有什么问题。但是通过查看这个 delegate 方法的文档后，可以知道，在每次 reload tableview 的时候，程序会先计算出每一个 cell 的高度，等所有高度计算完毕，确定了 tableview 的总的高度后，才开始渲染视图并显示在屏幕上。这意味着在显示 table view 之前需要执行一堆的计算，并且这是在主线程中进行的，如果计算量太大程序就很有可能出现卡顿感。比如： table view 的数据有上千条，或者计算高度的代码中还要先获取图片再根据图片计算高度，这些操作都是非常慢的。</p>

<p>如果在 cell 中使用了 autolayout，在计算 cell 高度时会更麻烦。有兴趣的可以看这里有篇关于[如何在 autolayout 下动态计算高度] 的文章。</p>

<p>为什么不能等滚动到某个 cell 的时候，再调用计算这个 cell 高度的 delegate 呢？原因是 tableview 需要获得它的内容的总高度，用这个高度去确定滚动条的大小等。直到 iOS 7 <code>UITableViewDelegate</code>中添加了新的 API</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">tableView</span><span class="p">(</span><span class="nl">tableView</span><span class="p">:</span> <span class="bp">UITableView</span><span class="p">,</span> <span class="n">estimatedHeightForRowAtIndexPath</span> <span class="nl">indexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这个方法用于返回一个 cell 的预估高度，如果在程序中实现了这个方法，tableview 首次加载的时候就不会调用<code>heightForRowAtIndexPath</code> 方法，而是用 <code>estimatedHeightForRowAtIndexPath</code>  返回的预估高度计算 tableview 的总高度，然后 tableview 就可以显示出来了，等到 cell 可见的时候，再去调用<code>heightForRowAtIndexPath</code> 获取 cell 的正确高度。</p>

<p>通过使用<code>estimatedHeightForRowAtIndexPath</code> 这个 Delegate 方法，解决了首次加载 table view 出现的性能问题。但还有一个麻烦的问题，就是在 cell 没有被加载的时候计算 cell 的高度，上面给出的代码中，仅仅是计算一个 NSString 的高度，就需要不少代码了。这种计算实际上是必须的，然而在 iOS 8 开始，你可能可以不用再写这些烦人的计算代码了！</p>

<h2>iOS 8 的魔法</h2>

<p>在 iOS 8 中，self size cell 提供了这样一种机制：cell 如果有一个确定的宽度/高度，autolayout 会自动根据 cell 中的内容计算出对应的高度/宽度。</p>

<h3>TableView 中的 cell 自适应</h3>

<p>要让 table view 的 cell 自适应内容，有几个要点：</p>

<ul>
<li>设置的 AutoLayout 约束必须让 cell 的 contentView 知道如何自动延展。关键点是 contentView 的 4 个边都要设置连接到内容的约束，并且内容是会动态改变尺寸的。</li>
<li>UITableView 的 <code>rowHeight</code> 的值要设置为 <code>UITableViewAutomaticDimension</code></li>
<li>和 iOS 7 一样，可以实现 <code>estimatedHeightForRowAtIndexPath</code> 方法提升 table view 的第一次加载速度。</li>
<li>任何时候 cell 的 <code>intrinsicContentSize</code> 改变了（比如 table view 的宽度变了），都必须重新加载 table view 以更新 cell。</li>
</ul>


<h4>例子</h4>

<p>在 Xcode 中新建一个项目，在 storyboard 中创建一个 UITableViewController 的 IB，创建一个如下样子的 cell：</p>

<p><img src="/images/posts/2014-11-13-self-size-cell-1.jpg" alt="图1 cell 外观" /></p>

<p><em>图1 cell 外观</em></p>

<p>这个 cell 中有 3 个元素，其中 imageView 的 autoLayout 约束为：</p>

<ul>
<li>imageView 左边离 contentView 左边 0</li>
<li>imageView 上边离 contentView 上边 0</li>
<li>imageView 的 width 和 height 为 80</li>
<li>imageView 下边离 contentView 下边大于等于 0（为了防止内容太少，导致 cell 高度小于图片高度）</li>
</ul>


<p>titleLabel 的 autoLayout 约束为：</p>

<ul>
<li>titleLabel 左边离 imageView 右边 8</li>
<li>titleLabel 上边和 imageView 上边在同一只线上</li>
<li>titleLabel 右边离 contentView 右边 0</li>
<li>titleLabel 下边离 description 上边 8</li>
<li>titleLabel 的高度小于等于 22，优先级为 250</li>
</ul>


<p>descriptionLabel 的约束为：</p>

<ul>
<li>descriptionLabel 左边和 titleLabel 左边在同一直线上</li>
<li>descriptionLabel 上边里 titleLabel 8</li>
<li>descriptionLabel 下边里 contentView 下边 0</li>
<li>descriptionLabel 右边离 contentView 右边 0</li>
</ul>


<p>然后在这个 IB 对应的  UITableViewController 中加载一些数据进去，显示效果如图：</p>

<p><img src="/images/posts/2014-11-13-self-size-cell-2.jpg" alt="图2 自适应 cell 效果图" /></p>

<p><em>图2 自适应 cell 效果图</em></p>

<p>实现这个效果，我除了设置了 autoLayout，还设置了 tableView 的 <code>rowHeight = UITableViewAutomaticDimension</code>，然后就是这样了。一点计算 cell 高度的代码都没有！！我连 <code>heightForRowAtIndexPath</code>都不用实现，真的是&hellip;.爽出味啊！所以如果已经在开发 iOS 8 Only 的应用了一定要用autolayout，把烦人的计算交给 autolayout 去吧。</p>

<h3>CollectionView 中的 cell 自适应</h3>

<p>在 collection view 中也能让 cell 自适应内容大小，如果 UICollectionView 的 layout 是一个 UICollectionViewFlowLayout，只需要将 <code>layout.itemSize = ...</code> 改成 <code>layout.estimatedItemSize = ...</code>。
只要设置了 layout 的 estimatedItemSize，collection view 就会根据 cell 里面的 autolayout 约束去确定cell 的大小。</p>

<p><strong>原理：</strong></p>

<ol>
<li>collection view 根据 layout 的 estimatedItemSize 算出估计的 contentSize，有了 contentSize collection view 就开始显示</li>
<li>collection view 在显示的过程中，即将被显示的 cell 根据 autolayout 的约束算出自适应内容的 size</li>
<li>layout 从 collection view 里获取更新过的 size attribute</li>
<li>layout 返回最终的 size attribute 给 collection view</li>
<li>collection 使用这个最终的 size attribute 展示 cell</li>
</ol>


<h2>总结</h2>

<p>这次 iOS 8 的发布对 UI 开发来说是越来方便了，很多以前需要写大量计算的代码现在都可以通过拖拖 IB 上的 UI 控件就可以实现了，当然首先你要会 autolayout。 如果很幸运的在开发 iOS 8 only 的应用，真的可以删除<code>heightForRowAtIndexPath</code>中那些繁重的计算代码了！让 autolayout 帮我们完成所有的工作吧。</p>

<h2>参考</h2>

<ul>
<li><a href="https://developer.apple.com/videos/wwdc/2014/#226-video">WWDC Session 226 Whats New in Table and Collection Views</a></li>
<li><a href="http://captechconsulting.com/blog/tyler-tillage/ios-8-tutorial-series-auto-sizing-table-cells">iOS 8 Tutorial Series: Auto Sizing Table Cells</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 8 Extension Today Widget 开发总结：数据共享]]></title>
    <link href="http://vit0.com/blog/2014/11/12/ios-8-extension-today-widget-kai-fa-zong-jie/"/>
    <updated>2014-11-12T21:34:00+08:00</updated>
    <id>http://vit0.com/blog/2014/11/12/ios-8-extension-today-widget-kai-fa-zong-jie</id>
    <content type="html"><![CDATA[<p>这篇文章主要记录了在制作 Today Widget 时的一些思考，如果想要知道如何创建一个 Today Widget，可以参考下面的文章：</p>

<ul>
<li><a href="http://www.raywenderlich.com/83809/ios-8-today-extension-tutorial">绿皮网的 iOS 8 Today Extension tutorial(英文)</a></li>
<li><a href="http://onevcat.com/2014/08/notification-today-widget/">猫神的WWDC 2014 Session笔记 - iOS 通知中心扩展制作入门</a></li>
</ul>


<hr />

<p>在制作 Extension 的过程中还是遇到了一些坑，这里做一些记录。</p>

<p>Extension 的本质：相当于是一个独立的小 App，它可以做到通过 group 的方式和主 app 共享数据。</p>

<p>对于 Today widget 的开发实际上还是比较简单，可以当做是制作一个独立的页面，拉拉 outlet、action 之类的，然后响应数据更新界面，响应动作执行跳转等等。但是这里最大的疑问是数据共享的问题。</p>

<p>从文档中可以知道，想要让主 app 和 extension 之间共享数据，需要通过一个共享文件目录进行共享。这个共享目录通过指定一个 group id 来获取。</p>

<h3>NSUserDefaults 共享数据</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">userDefaults</span> <span class="o">=</span> <span class="bp">NSUserDefaults</span><span class="p">(</span><span class="nl">suiteName</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">group</span><span class="p">.</span><span class="n">extension</span><span class="p">.</span><span class="n">vito</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">userDefaults</span><span class="o">?</span><span class="p">.</span><span class="n">setObject</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="nl">forKey</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">title</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>共享目录</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">fileManager</span> <span class="o">=</span> <span class="bp">NSFileManager</span><span class="p">.</span><span class="n">defaultManager</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">containerURL</span> <span class="o">=</span> <span class="n">fileManager</span><span class="p">.</span><span class="n">containerURLForSecurityApplicationGroupIdentifier</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">group</span><span class="p">.</span><span class="n">mycontainer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">let</span> <span class="n">storeURL</span> <span class="o">=</span> <span class="n">containerURL</span><span class="o">?</span><span class="p">.</span><span class="n">URLByAppendingPathComponent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">db</span><span class="p">.</span><span class="n">sqlite</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>现在知道了如何在共享区域保存数据，但是什么时机来保存数据呢？
一种方式是将应用的数据和 extension 的数据放到共享容器中，这样主应用和 extension 都可以访问到全部的数据。这样的好处就是可以保证 extension 和主应用中显示的数据可以是完全一致的，因为访问的数据就是同一份数据。但是貌似在现在的版本中<em>共享容器中的数据会在手机重装系统后丢失</em>，这似乎是一个 bug：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/24641768/accessing-core-data-sql-database-in-ios-8-extension-sharing-data-between-app-an">StackOverflow 上的讨论</a></li>
<li><a href="http://openradar.appspot.com/18750178">Open 状态的相关 Bug report rdar://18750178</a></li>
</ul>


<h3>Background Fetch 机制联想到 extension 的共享数据刷新</h3>

<p>Today widget 也是有 Background fetch 机制的，在<code>func widgetPerformUpdateWithCompletionHandler(completionHandler: ((NCUpdateResult) -&gt; Void)!)</code>方法中就是接收到后台刷新的方法。设备会在认为合适的时间调用这里的代码。</p>

<p>有了后台刷新机制，我们可以就可以很方便的刷新共享区域的数据，比如在主应用中的 background fetch 代码中执行写入数据的代码，设置 background fetch 的时间间隔为一天。这样可以让 extension 每一天显示的数据都是新的。这种方式可以说是比较简单省事，又能达到预期效果的实现方式。
缺点是：由于backgroud fetch 的刷新时机实际上不是很准确的，就有可能会有一些小的延迟等情况，而且用户也可以在系统的设置应用中关闭其它应用的 background fetch 功能。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 8 HealthKit 介绍]]></title>
    <link href="http://vit0.com/blog/2014/10/30/ios-8-healthkit-jie-shao/"/>
    <updated>2014-10-30T22:34:00+08:00</updated>
    <id>http://vit0.com/blog/2014/10/30/ios-8-healthkit-jie-shao</id>
    <content type="html"><![CDATA[<h2>如何创建 HealthKit 数据</h2>

<p>在创建数据前，我们首先需要知道 HealthKit 的数据结构。</p>

<p><strong>HKUnit</strong></p>

<p>是基本的数据单位，它下面有很多子类表示不同的单位。</p>

<p><strong>HKQuantity</strong></p>

<p>表示某一种数据单位的数量，可以通过这个对象获取一种单位转换成另一种单位的值：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">HKUnit</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">gramUnit</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKUnit</span> <span class="n">gramUnit</span><span class="p">];</span>
</span><span class='line'><span class="n">HKQuantity</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">grams</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKQuantity</span> <span class="nl">quantityWithUnit</span><span class="p">:</span><span class="n">gramUnit</span> <span class="nl">doubleValue</span><span class="p">:</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'><span class="kt">double</span> <span class="n">kg</span> <span class="o">=</span> <span class="p">[</span><span class="n">grams</span> <span class="nl">doubleValueForUnit</span><span class="p">:[</span><span class="n">HKUnit</span> <span class="nl">unitFromString</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]];</span>
</span><span class='line'><span class="c1">// kg -&gt; 0.2</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>但是前提是这两个互相转换的单位之间是理论上可以转换的，可以通过 HKUnit 的实例方法 <code>- (BOOL)isCompatibleWithUnit: (HKUnit *)unit;</code> 来判断两个单位之间是否可以转换</p>

<p><strong>HKObjectType</strong></p>

<p>用来表示一个数据是什么类型的，HealthKit 中有几十种类型。HKObjectType 的层级结构可以看下图：</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-1.png" alt="图1 HKObjectType 的层级结构" /></p>

<p><em>图1 HKObjectType 的层级结构</em></p>

<p>在 HealthKit 中我们不能创建自己的类型，但是理解了 HKObjectType 的数据结构对我们今后的开发有很大好处的。
HKObjectType 对象中主要有两个属性：</p>

<ul>
<li>identifier</li>
<li>type name</li>
</ul>


<p>我们可以根据需要创建不同类型的 HKObjectType：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">@interface</span> <span class="nc">HKobjectType</span> : <span class="bp">NSObject</span>
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">quantityTypeForIdentifier</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span><span class="p">;</span>
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="n">HKCategoryType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">categoryTypeForIdentifier</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span><span class="p">;</span>
</span><span class='line'>  <span class="o">+</span> <span class="p">(</span><span class="n">HKCharacteristicType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">characteristicTypeForIdentifier</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span><span class="p">;</span>
</span><span class='line'> <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKObject</strong></p>

<p>所有存储在 HealthKit 中的数据都是 HKObject 的子类。HKObject 的类结构和 HKObjectType 的类结构很相似</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-2.png" alt="图2 HKObject 类的层级结构" /></p>

<p><em>图2 HKObject 类的层级结构</em></p>

<p><strong>HKQuantitySample</strong></p>

<p>是目前 HealthKit 中使用最广泛的一个 HKObject。它主要有两个属性：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">@interface</span> <span class="nc">HKQuantitySample</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">quantityType</span><span class="p">;</span>  <span class="c1">// 表示这个数量是什么类型的</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="n">HKQuantity</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">quantity</span><span class="p">;</span> <span class="c1">// 数量的值</span>
</span><span class='line'> <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>需要注意的是，<code>quantityType</code> 和 <code>quantity</code> 必须是正确匹配的否则在运行时程序会抛出异常。</p>

<p><strong>HKCategorySample</strong></p>

<p>它和 HKQuantitySample 类似
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">HKCategorySample</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="n">HKCategoryType</span> <span class="o">*</span><span class="n">categoryType</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSInteger</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKSample</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">HKSample</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="n">HKSampleType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sampleType</span><span class="p">;</span> <span class="c1">// 会依据子类来确定这个类型的最终值</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSDate</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSDate</span> <span class="o">*</span><span class="n">endDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKObject</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">HKObject</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSUUID</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">UUID</span><span class="p">;</span> <span class="c1">// 唯一识别</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="n">HKSource</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">source</span><span class="p">;</span> <span class="c1">// 数据来源</span>
</span><span class='line'>    <span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">)</span> <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">metadata</span><span class="p">;</span> <span class="c1">// 其它数据</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>HKObject 中的所有属性都是不可变的，因为一旦数据收集后就不应该被更改。HKObject 也是不可变的。所以想要创建一个 HKObject 数据我们应该通过 HKQuantitySample 来创建</p>

<h3>创建一个 HKObject</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">identifier</span> <span class="o">=</span> <span class="n">HKQuantityTypeIdentifierBodyTemperature</span><span class="p">;</span>
</span><span class='line'><span class="n">HKQuantityType</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tempType</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKObjectType</span> <span class="nl">quantityTypeForIdentifier</span><span class="p">:</span><span class="n">identifier</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">HKQuantity</span> <span class="o">*</span><span class="n">myTemp</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKQuantity</span> <span class="nl">quantityWithUnit</span><span class="p">:[</span><span class="n">HKUnit</span> <span class="n">degreeFahrenheitUnit</span><span class="p">]</span> <span class="nl">doubleValue</span><span class="p">:</span><span class="mf">98.6</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">NSDictionary</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">meta</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>    <span class="nl">HKMetadataKeyBodyTemperatureSensorLocation</span><span class="p">:</span> <span class="l">@(</span><span class="n">HKBodyTemperatureSensorLocationEar</span><span class="l">)</span>
</span><span class='line'><span class="l">}</span>
</span><span class='line'><span class="n">HKQuantitySample</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">temperatureSample</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKQuantitySample</span> <span class="nl">quantitySampleWithType</span><span class="p">:</span><span class="n">tempType</span>
</span><span class='line'>                    <span class="nl">quantity</span><span class="p">:</span><span class="n">myTemp</span>
</span><span class='line'>                    <span class="nl">startDate</span><span class="p">:[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]</span>
</span><span class='line'>                    <span class="nl">endDate</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSDate</span> <span class="n">date</span><span class="p">]</span>
</span><span class='line'>                    <span class="nl">metadata</span><span class="p">:</span> <span class="n">meta</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通过上面的代码，我们已经创建了一个新的数据，接下来我们要将这个数据保存到 HealthKit 的数据库中</p>

<h2>保存 HealthKit 数据</h2>

<p><strong>HKHealthStore</strong></p>

<p>可以想象成我们通过这个对象与 HealthKit 的数据库进行连接，可以通过这个对象保存和查询数据。需要注意的是，HKHealthStore 在应用中应该只保存一个对象，因为每次创建新的对象，实际上相当于是同一个对象，可以理解为它们都会链接到同一个数据库。</p>

<p>使用 HKHealthStore 保存数据的例子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">store</span> <span class="o">=</span> <span class="p">[</span><span class="n">HKHealthStore</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">HKQuantitySample</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">mySample</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="n">newSample</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">store</span> <span class="nl">saveObject</span><span class="p">:</span><span class="n">mySample</span> <span class="nl">withCompletion</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Object</span> <span class="n">Saved</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>保存数据的代码看起来很容易理解，成功保存数据后，接下来我们希望能从 HealthKit 中获取我们想要的数据</p>

<h2>获取 HealthKit 数据</h2>

<p>可以获取的数据除了 HKObject 外还有 Characteristics</p>

<p><strong>Characteristics</strong></p>

<p>这个数据是用户保存在 HealthKit 中个人信息，这些信息一般情况下不会改变。比如：生日日期、血型、性别等
通过 API 获取这些信息很简单，下面代码用来获取用户记录在 healthKit 中的生日</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSError</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSDate</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">dateOfBirth</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">store</span> <span class="nl">dateOfBirthWithError</span><span class="p">:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">error</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>但是大部分数据并不能用这么简单的方式获取，这时候我们就需要通过像条件查询一样的东西来查询数据</p>

<p><strong>HKQuery</strong></p>

<p>我们可以使用 Predicates</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">HKQuantity</span> <span class="o">*</span><span class="n">weight</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="bp">NSPredicate</span> <span class="nl">predicateWithFormat</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">k</span> <span class="o">&gt;</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">HKPredicateKeyPathQuantity</span><span class="p">,</span> <span class="n">weight</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>为了简化 NSPredicate 的使用，HealthKit 中提供了 <code>NSPredicateOperatorType</code>，我们可以将这个 Enum 传入 HKQuery 的一个工厂方法中，生成想要的 HKQuery 对象。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSPredicateOperatorType</span> <span class="n">greaterThan</span> <span class="o">=</span> <span class="n">NSGreaterThanPredicateOperatorType</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">HKQuery</span> <span class="nl">predicateForQuantitySamplesWithOperatorType</span><span class="p">:</span><span class="n">greaterThan</span> <span class="nl">quantity</span><span class="p">:</span><span class="n">weight</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKSampleQuery</strong></p>

<ul>
<li>可以设置限制: HKObjectQueryNoLimit</li>
<li>排序：NSSortDescriptors</li>
</ul>


<p>一个获取最近血糖值的例子</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bloodSugar</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">endKey</span> <span class="o">=</span> <span class="n">HKSampleSortIdentifierEndDate</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSSortDescriptor</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">endDate</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSSortDescriptor</span> <span class="nl">sortDescriptorWithKey</span><span class="p">:</span><span class="n">endKey</span> <span class="nl">ascending</span><span class="p">:</span><span class="nb">NO</span><span class="p">];</span>
</span><span class='line'><span class="n">HKSampleQuery</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HKSampleQuery</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSampleType</span><span class="p">:</span><span class="n">bloodSugar</span>
</span><span class='line'>                <span class="nl">predicate</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                <span class="nl">limit</span><span class="p">:</span><span class="mi">1</span>
</span><span class='line'>                <span class="nl">sortDescriptors</span><span class="p">:</span><span class="l">@[</span><span class="n">endDate</span><span class="l">]</span>
</span><span class='line'>                <span class="nl">resultsHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">HKSampleQuery</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">,</span> <span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">results</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HKQuantitySample</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sample</span> <span class="o">=</span> <span class="p">[</span><span class="n">results</span> <span class="n">lastObject</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">Sample</span><span class="p">:</span>  <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">sample</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>通过上面的代码可以获取到指定的信息，但是如果我们想要实时更新数据，在每次数据改变时都会获取到最新的数据，我们可以使用 <code>HKObserverQuery</code></p>

<p><strong>HKObserverQuery</strong></p>

<p>用于监听 HealthKit 数据库中的改变。
它和 HKSampleQuery 的不同之处在于，它是一直处于运行状态的，绑定在这个 Query 中的回调代码会在每次数据改变时被调用。
并且 HKObserverQuery 还支持 background delivery</p>

<p>示例代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bloodSugar</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">HKObserverQuery</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">;</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HKObserverQuery</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithSampleType</span><span class="p">:</span><span class="n">bloodSugar</span>
</span><span class='line'>            <span class="nl">predicate</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>            <span class="nl">updateHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">HKObserverQuery</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">,</span> <span class="n">HKObserverQueryCompletionHandler</span> <span class="n">handler</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Updated</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKAnchoredObjectQuery</strong></p>

<p>作为 HealthKit 的数据提供方，用户每次添加了新数据后，等到一个何时的时机，需要向 HealthKit 的云端数据库中同步数据。开发者可能会想到获取所有的数据，再判断哪些数据需要上传。而 HKAnchoredObjectQuery</p>

<p>HKAnchoredObjectQuery 可以设置限制数，还可以设置一个锚（Anchors）。等一下&hellip;锚是什么东西啊喂&hellip;.</p>

<p>我们来看这两张图：</p>

<p>1.这是 anchor=0 时我们会获取所有的数据</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-3.png" alt="" /></p>

<p>2.当 anchor=3 时我们会获取从第四个数据开始之后的所有数据</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-4.png" alt="" /></p>

<p>这其实就是个索引一样的东西&hellip;anchor 应该设置为我们最后一次见到的数据的 anchor 值，如果还没有见到过任何数据，可以将 anchor 设置为0，在获取数据的 callback 中我们会得到新的 anchor。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">lastAnchor</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bloodSugar</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">HKAnchoredObjectQuery</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">;</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HKAnchoredObjectQuery</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithType</span><span class="p">:</span><span class="n">bloodSugar</span>
</span><span class='line'>                <span class="nl">predicate</span><span class="p">:</span><span class="nb">nil</span>
</span><span class='line'>                <span class="nl">anchor</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">lastAnchor</span>
</span><span class='line'>                <span class="nl">limit</span><span class="p">:</span><span class="n">HKObjectQueryNoLimit</span>
</span><span class='line'>                <span class="nl">completionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">HKAnchoredObjectQuery</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">,</span> <span class="bp">NSArray</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">results</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">newAnchor</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">lastAnchor</span> <span class="o">=</span> <span class="n">newAnchor</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">Results</span><span class="p">:</span> <span class="o">%</span><span class="p">@</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">results</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>执行 Query</h3>

<p>执行 queries 的方法在 <code>HKHealthStore</code> 中。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">HKHealthStore</span> :<span class="bp">NSObject</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">executeQuery</span><span class="p">:(</span><span class="n">HKQuery</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">query</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">stopQuery</span><span class="p">:(</span><span class="n">HKQuery</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">query</span><span class="p">;</span> <span class="c1">// 调用这个方法会停止查询数据，并且阻止 query 中的回调被执行</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>一般只有长时间运行的 queries 需要被停止。</p>

<h3>获取统计数据</h3>

<p>我们可以获取所有的数据，然后手动计算出我们想要的统计数据。但是我们也可以使用系统提供的 <code>HKStatistics</code>对象获取统计数据。</p>

<p><strong>HKStatistics</strong></p>

<ul>
<li>可以获取几种统计数据：Sum、Min、Max、Average</li>
<li>获取指定数据源的所有数据</li>
<li>HKStatistics 只支持获取 quantity 类型的数据</li>
</ul>


<p><strong>Classifying Types</strong></p>

<p>不是所有的类型都一样的，比如能量消耗值，我们会关心的是最小值、最大值和平均值，所有能量消耗的总和的意义看起来没有其它几个值重要。</p>

<ul>
<li>Discrete 类型只关心：最小值、最大值和平均值</li>
<li>Cumulative 类型只关心：总和</li>
</ul>


<p>HKQuantityType 总是 discrete 或者 cumulative，它有一个 <code>aggregationStyle</code>的属性，可以通过这个属性来判断一个 HKQuantityType 是什么类型的。</p>

<p>回到<code>HKStatistics</code>，我们可以指定一个 <code>HKStatisticsOptions</code> 告诉 HKStatistics 我们需要什么样的统计数据</p>

<p><strong>HKStatisticsQuery</strong></p>

<p>如何使用HKStatisticsQuery 获取今天走的步数</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">HKQuantityType</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">stepCount</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSPredicate</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">today</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">HKStatisticsOptions</span> <span class="n">sumOptions</span> <span class="o">=</span> <span class="n">HKStatisticsOptionCumulativeSum</span><span class="p">;</span>
</span><span class='line'><span class="n">HKStatisticsQuery</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">;</span>
</span><span class='line'><span class="n">query</span> <span class="o">=</span> <span class="p">[[</span><span class="n">HKStatisticsQuery</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithQuantityType</span><span class="p">:</span><span class="n">stepCount</span>
</span><span class='line'>                <span class="nl">quantitySamplePredicate</span><span class="p">:</span><span class="n">today</span>
</span><span class='line'>                <span class="nl">options</span><span class="p">:</span><span class="n">sumOptions</span>
</span><span class='line'>                <span class="nl">completionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">HKStatisticsQuery</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">query</span><span class="p">,</span> <span class="n">HKStatistic</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">result</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">HKQuantity</span> <span class="o">*</span><span class="n">sum</span> <span class="o">=</span> <span class="p">[</span><span class="n">result</span> <span class="n">sumQuantity</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">Steps</span><span class="p">:</span> <span class="o">%</span><span class="n">lf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="p">[</span><span class="n">sum</span> <span class="nl">doubleValueForUnit</span><span class="p">:[</span><span class="n">HKUnit</span> <span class="n">countUnit</span><span class="p">]]);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>HKStatisticsCollection</strong></p>

<p>如果我们想要获取多个统计数据，我们可以使用<code>HKStatisticsCollection</code>, 我们可以指定一个时间段做为统计数据的间距，比如 24 小时为一个统计单元，<code>HKStatisticsCollection</code> 中的数据就会是每个 24 小时内的统计统计数据的集合。</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-5.png" alt="图3 HKStatisticsCollection 中的数据示意图" /></p>

<p><em>图3 HKStatisticsCollection 中的数据示意图</em></p>

<p><strong>HKStatisticsCollectionQuery</strong></p>

<p>如何使用：</p>

<ul>
<li>设置一个 Statistics options</li>
<li>设置 Anchor date</li>
<li>Interval componets</li>
<li>获取 Collection</li>
</ul>


<p>代码类似其它 Query 的代码，就不写了。</p>

<h2>HealthKit 最佳实战</h2>

<p>开始使用 HealthKit 首先需要在项目中开启 HealthKit 功能。方法是<strong>项目 target -> Capabilities  -> 开启 Health Kit 功能</strong></p>

<p><strong>关于隐私和权限</strong></p>

<ul>
<li>HealthKit 中的数据对用户来说可能是非常敏感的数据</li>
<li>不同类型数据的权限是分开的</li>
<li>读/写权限是分开的</li>
</ul>


<p>在使用 HealthStore 之前开发者需要先使用下面的方法请求权限。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">requestAuthorizationToShareTypes:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">typesToShare</span>
</span><span class='line'>                <span class="nf">readTypes:</span><span class="p">(</span><span class="bp">NSSet</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">typesToRead</span>
</span><span class='line'>                <span class="nf">completion:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="bp">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">))</span><span class="nv">completion</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中，typesToshare 用于指定<strong>读权限</strong>的类型，typesToRead 指定写权限的类型。一旦程序中请求了权限，系统会弹出一个设置权限的界面，如下图：</p>

<p><img src="/images/posts/2014-07-18-ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer-6.png" alt="图4 请求 HealthKit 多个类型权限的弹出界面" /></p>

<p><em>图4 请求 HealthKit 多个类型权限的弹出界面</em></p>

<p>请求完权限后，在程序中，可以通过 <code>- (HKAuthorizationStatus)authorizationStatusForType:(HKObjectType *)type;</code>查看是否获得了指定类型的权限。</p>

<h2>总结</h2>

<p>对于开发者来说 HealthKit 给应用带来更多的可能性，开发者可以通过获取 HealthKit 内的信息让自己的 App 内容更佳充实。</p>

<h2>引用</h2>

<p>这篇文章所有内容来自<a href="https://developer.apple.com/videos/wwdc/2014/#203-video">WWDC Session 203 Introducing Healthkit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 语音合成器 - AVSpeechSynthesizer]]></title>
    <link href="http://vit0.com/blog/2014/07/18/ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer/"/>
    <updated>2014-07-18T23:41:00+08:00</updated>
    <id>http://vit0.com/blog/2014/07/18/ios-7-yu-yin-he-cheng-qi-avspeechsynthesizer</id>
    <content type="html"><![CDATA[<p>再过不久格志就将迎来一次比较大的版本更新，现在主要功能都开发的差不多了，剩下一些细节的完善。这两天也是正在制作格志的新手引导功能，前段时间 facebook 出的 Paper 中的新手引导效果非常棒，这次格志的新手引导也有借鉴了部分，其中一个功能是使用语音朗读出新手引导的文字内容。</p>

<p>由于格志是一个时髦的应用（Only iOS 7）…所以可以很开心的使用 iOS 7 中才有的 AVSpeechSynthesizer，做了一搜索后，可以说这货真的很简单、很好用！</p>

<h2>如何使用</h2>

<p>首先，使用 AVSpeechSynthesizer 时需要 <code>#import &lt;AVFoundation/AVFoundation.h&gt;</code></p>

<p>然后我们可以用几行代码实现让程序阅读一段文字：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">string</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">World</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="bp">AVSpeechUtterance</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">utterance</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVSpeechUtterance</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'><span class="n">utterance</span><span class="p">.</span><span class="n">voice</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVSpeechSynthesisVoice</span> <span class="nl">voiceWithLanguage</span><span class="p">:@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">en</span><span class="o">-</span><span class="n">US</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">AVSpeechSynthesizer</span> <span class="o">*</span><span class="n">speechSynthesizer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVSpeechSynthesizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">speechSynthesizer</span> <span class="nl">speakUtterance</span><span class="p">:</span><span class="n">utterance</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>AVSpeechUtterance </code>对象用于封装要朗读的话语，可以指定这段话的语言、音量和语速等。</p>

<p>但是上面的代码有个问题，上面代码第三行中传入<code>AVSpeechUtterance</code>的<code>AVSpeechSynthesisVoice </code>对象是在英文的语言环境下阅读文字，如果<strong><em>文字内容的语言</em></strong>和<strong><em>声音的语言</em></strong>不同，程序就不会发出声音。而格志是个国际化 App，目前支持7种语言，所以要针对不同的语言内容设置正确的语音语言代码（如：en-US, zh-CH）。</p>

<p>可以通过<code>[AVSpeechSynthesisVoice speechVoices]</code>查询所有支持的语言，幸运的是可以通过<code>[AVSpeechSynthesisVoice currentLanguageCode]</code>获取用户当前系统设置中的语言所对应的语言代码。所以上面的代码可以改成这样以支持国际化</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">NSString</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">string</span> <span class="o">=</span> <span class="p">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span><span class="p">,</span> <span class="n">World</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="bp">AVSpeechUtterance</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">utterance</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVSpeechUtterance</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithString</span><span class="p">:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">code</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVSpeechSynthesisVoice</span> <span class="n">currentLanguageCode</span><span class="p">];</span> <span class="c1">// 获取用户当前的语言代码</span>
</span><span class='line'><span class="n">utterance</span><span class="p">.</span><span class="n">voice</span> <span class="o">=</span> <span class="p">[</span><span class="bp">AVSpeechSynthesisVoice</span> <span class="nl">voiceWithLanguage</span><span class="p">:</span><span class="n">code</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="bp">AVSpeechSynthesizer</span> <span class="o">*</span><span class="n">speechSynthesizer</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">AVSpeechSynthesizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">speechSynthesizer</span> <span class="nl">speakUtterance</span><span class="p">:</span><span class="n">utterance</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>到这里好像我所需要的功能就大概实现了，当然在真实环境中还应该对语速、音量等参数做一些微调，让语音听上去更自然清晰。</p>

<p>然后…<code>AVSpeechSynthesizer </code>不止只有这些，<code>AVSpeechSynthesizer </code>的方法中还有有暂停、停止和继续的方法，注意到停止和暂停方法都可以传入一个<code>(AVSpeechBoundary)boundary</code>的参数，用于决定程序是在一个单词朗读完（AVSpeechBoundaryWord）再暂停还是立即（AVSpeechBoundaryImmediate）暂停。</p>

<p><strong> AVSpeechSynthesizerDelegate</strong></p>

<p>在<code>AVSpeechSynthesizerDelegate</code>中其实其它方法都没什么好说的，都是些开始阅读、结束阅读、取消等的状态回调。但是有一个方法不同，它带了将要阅读的文字的 NSRange，这个方法是：<code>- (void)speechSynthesizer:(AVSpeechSynthesizer *)synthesizer willSpeakRangeOfSpeechString:(NSRange)characterRange utterance:(AVSpeechUtterance *)utterance;</code>，如果获取到将要阅读的文字是哪些，我们就可以做一些有趣的事情，如：像歌词字幕一样高亮正在阅读的文字，或者可以像下面一样在屏幕中只显示将要阅读的文字。</p>

<p><img src="/images/posts/2014-07-18-ios-7-AVSpeechSynthesizer.gif" title="Speak delegate demo" alt="" /></p>

<h2>总结</h2>

<p>总之 <code>AVSpeechSynthesizer </code> 是一个简单又实用的语音合成类，分分钟上手有木有。使用语音朗读的场景感觉还是很多的，比如这次格志里用到的朗读用户引导的文字，语音导航，有声读物等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 UIKit Dynamic 学习总结]]></title>
    <link href="http://vit0.com/blog/2014/03/08/ios-7-uikit-dynamic-xue-xi-zong-jie/"/>
    <updated>2014-03-08T20:49:00+08:00</updated>
    <id>http://vit0.com/blog/2014/03/08/ios-7-uikit-dynamic-xue-xi-zong-jie</id>
    <content type="html"><![CDATA[<h2>什么是 UIKit Dynamics</h2>

<p>iOS 7 中推出的UIKit Dynamics，主要带来了模拟现实的二维动画效果，Apple 的高度封装让开发者不用知道太多物理知识也可以开发出逼真的物理动画。</p>

<ul>
<li>Real word inspired interactions</li>
<li>Combining predefined and interactive animations</li>
<li>Designed for UI</li>
</ul>


<h2>Why</h2>

<p>苹果鼓励模拟真实世界的交互而不只是简单的像素堆砌的拟物风格，所以苹果这些模拟现实的交互动画封装进了 UIKit，希望开发者能开发出更多模拟现实的交互。</p>

<h2>关键类</h2>

<ul>
<li><strong>UIDynamicAnimator</strong>，封装了底层 iOS 物理引擎，为动力项（UIDynamicItem）提供物理相关的功能和动画。</li>
<li><strong>UIDynamicBehavior</strong>，动力行为，为动力项提供不同的物理行为</li>
<li><strong>UIDynamicItem</strong>，动力项，相当于现实世界中的一个基本物体</li>
</ul>


<p><img src="/images/posts/2014-03-08-uidynamic-1.png" alt="image" /></p>

<p>这三个类的结构是：UIDynamicAnimator 需要一个 refrence view 作为物理引擎的坐标系统，再根据不同需求添加各种动力行为（UIDynamicBehavior），而每个动力行为都可以指定一个或多个动力项（UIDynamicItem），常用的动力项就是一个普通的 View。</p>

<h2>UIDynamicAnimator</h2>

<p>UIDynamicAnimator 封装了底层 iOS 物理引擎，为动力项（UIDynamicItem）提供物理相关的功能和动画，并为这些动画提供上下文。Animator 作为底层 iOS 物理引擎和动力项（UIDynamicItem）之间的中介，通过 <code>- (void)addBehavior:(UIDynamicBehavior *)behavior;</code> 方法添加不同的动力行为，让动力项拥有物理功能和动画。</p>

<p>现在来看看 UIDynamicAnimator 都有哪些方法：</p>

<ul>
<li>初始化和管理一个 Dynamic Animator</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 传入一个 Reference view 创建一个 Dynamic Animator</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithReferenceView:</span><span class="p">(</span><span class="bp">UIView</span><span class="o">*</span><span class="p">)</span><span class="nv">view</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 获取在 CGRect 内所有的动力项，这个 CGRect 是基于 Reference view 的二维坐标系统的</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="bp">NSArray</span><span class="o">*</span><span class="p">)</span><span class="nl">itemsInRect</span><span class="p">:(</span><span class="bp">CGRect</span><span class="p">)</span><span class="n">rect</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 添加动力行为</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">addBehavior</span><span class="p">:(</span><span class="bp">UIDynamicBehavior</span> <span class="o">*</span><span class="p">)</span><span class="n">behavior</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 删除指定的动力行为</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">removeBehavior</span><span class="p">:(</span><span class="bp">UIDynamicBehavior</span> <span class="o">*</span><span class="p">)</span><span class="n">behavior</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 删除所有的动力行为</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">removeAllBehaviors</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>获取 Dynamic Animator’s 的状态</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 是否正在运行</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">getter</span> <span class="o">=</span> <span class="n">isRunning</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">running</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 获取所有的 Behaviors</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span><span class="o">*</span> <span class="n">behaviors</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIView</span><span class="o">*</span> <span class="n">referenceView</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 这个 delegate 中有两个回调方法，一个是在 animator 暂停的时候调用，一个是在将要恢复的时候调用</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicAnimatorDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 已经运行了多久的时间，是一个 NSTimeInterval</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="n">elapsedTime</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 如果动力项不是通过 animator 自动计算改变状态，比如，通过代码强制改变一个 item 的 transfrom 时，可以用这个方法通知 animator 这个 item 的改变。如果不用这个方法，animator 之后的动画会覆盖代码中对 item 做的改变，相当于代码改变 transform 变得没有意义。</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">updateItemUsingCurrentState</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>Collection View Additions</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithCollectionViewLayout:</span><span class="p">(</span><span class="bp">UICollectionViewLayout</span><span class="o">*</span><span class="p">)</span><span class="nv">layout</span> <span class="c1">// 传入一个 CollectionViewLayout 创建一个 Dynamic Animator</span>
</span><span class='line'><span class="err">–</span> <span class="nl">layoutAttributesForCellAtIndexPath</span><span class="p">:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">layoutAttributesForDecorationViewOfKind</span><span class="p">:</span><span class="nl">atIndexPath</span><span class="p">:</span>
</span><span class='line'><span class="err">–</span> <span class="nl">layoutAttributesForSupplementaryViewOfKind</span><span class="p">:</span><span class="nl">atIndexPath</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure></p>

<hr />

<p>从这里开始，让我们先创建一个项目，取名 DynamicDemo，选择 single view project。</p>

<p>在 ViewController.m 文件修改成如下代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">squareView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIDynamicAnimator</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">animator</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">ViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDynamicAnimator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithReferenceView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面的代码创建了一个方形 View，橘黄色背景色。还创建了一个UIDynamicAnimator。</p>

<h2>UIDynamicBehavior 是具体的物理行为。</h2>

<p>UIDynamicBehavior 赋予动态行为给一个或多个动态项（Dynamic Item）。</p>

<ul>
<li>UIDynamicBehavior 的主要方法和属性
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 在将要进行动画时的 block 回调</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">action</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 添加到该动态行为中的子动态行为</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">childBehaviors</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//  该动态行为相关联的dynamicAnimator</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="bp">UIDynamicAnimator</span> <span class="o">*</span><span class="n">dynamicAnimator</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//添加一个子动态行为</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">addChildBehavior</span><span class="p">:(</span><span class="bp">UIDynamicBehavior</span> <span class="o">*</span><span class="p">)</span><span class="n">behavior</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 移除一个子动态行为</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">removeChildBehavior</span><span class="p">:(</span><span class="bp">UIDynamicBehavior</span> <span class="o">*</span><span class="p">)</span><span class="n">behavior</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 当该动态行为将要被添加到一个UIDynamicAnimator中时，这个方法会被调用。</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">willMoveToAnimator</span><span class="p">:(</span><span class="bp">UIDynamicAnimator</span> <span class="o">*</span><span class="p">)</span><span class="n">dynamicAnimator</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在开发中，大部分情况下使用 UIDynamicBehavior 的子类就足够了，因为UIKit 中已经有几个现成的模拟现实的 UIDynamicBehavior 类。</p>

<h3>UIDynamicBehavior的子类有：</h3>

<h4>UIGravityBehavior</h4>

<p>重力行为，可以指定重力的方向和大小。用gravityDirection指定一个向量，或者设置 angle 和 magnitude。</p>

<p>打开刚才的项目，DynamicDemo，在 ViewController.m 中添加如下代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewDidAppear</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="bp">UIGravityBehavior</span> <span class="o">*</span><span class="n">gravity</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIGravityBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span> <span class="c1">// 创建一个重力行为</span>
</span><span class='line'>  <span class="n">gravity</span><span class="p">.</span><span class="n">gravityDirection</span> <span class="o">=</span> <span class="n">CGVectorMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 在垂直向下方向 1000 点/平方秒 的速度</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">gravity</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>运行项目可以看到效果：</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-gravity.gif" alt="image" /></p>

<h3>UICollisionBehavior</h3>

<p>碰撞行为，指定一个边界，物体在到达这个边界的时候会发生碰撞行为。通过实现 UICollisionBehaviorDelegate 可以跟踪物体什么时候开始碰撞和结束碰撞。</p>

<p>现在将下面代码添加到<code>[self.animator addBehavior:gravity];</code>之后</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建碰撞行为</span>
</span><span class='line'><span class="bp">UICollisionBehavior</span> <span class="o">*</span><span class="n">collision</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UICollisionBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="n">balls</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 指定 Reference view 的边界为可碰撞边界</span>
</span><span class='line'><span class="n">collision</span><span class="p">.</span><span class="n">translatesReferenceBoundsIntoBoundary</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// UICollisionBehaviorModeItems:item 只会和别的 item 发生碰撞；UICollisionBehaviorModeBoundaries：item 只和碰撞边界进行碰撞；UICollisionBehaviorModeEverything:item 和 item 之间会发生碰撞，也会和指定的边界发生碰撞。</span>
</span><span class='line'><span class="n">collision</span><span class="p">.</span><span class="n">collisionMode</span> <span class="o">=</span> <span class="n">UICollisionBehaviorModeEverything</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">collision</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>现在运行项目：</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-collision.gif" alt="image" /></p>

<p>UICollisionBehavior通过下面两个方法来添加碰撞边界，可以根据贝塞尔曲线或者一条直线生成碰撞边界。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addBoundaryWithIdentifier:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">forPath:</span><span class="p">(</span><span class="bp">UIBezierPath</span><span class="o">*</span><span class="p">)</span><span class="nv">bezierPath</span><span class="p">;</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addBoundaryWithIdentifier:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">identifier</span> <span class="nf">fromPoint:</span><span class="p">(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="nv">p1</span> <span class="nf">toPoint:</span><span class="p">(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="nv">p2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>UICollisionBehavior 里的 item 每次发生碰撞都可以通过 delegate 来监听事件。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// item 与 item 之间开始碰撞。</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">collisionBehavior:</span><span class="p">(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="nv">behavior</span> <span class="nf">beganContactForItem:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">item1</span> <span class="nf">withItem:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">item2</span> <span class="nf">atPoint:</span><span class="p">(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="nv">p</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// item 与 item 之间结束碰撞。</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">endedContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item1</span> <span class="nl">withItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// item 和边界开始碰撞</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">beganContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span> <span class="nl">atPoint</span><span class="p">:(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="n">p</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// item 和边界结束碰撞</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">endedContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>让我们为项目添加碰撞行为的 delegate ，修改 ViewController.m 为下面样子：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UICollisionBehaviorDelegate</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">squareView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIDynamicAnimator</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">animator</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">BeginnerViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDynamicAnimator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithReferenceView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewDidAppear</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">UIGravityBehavior</span> <span class="o">*</span><span class="n">gravity</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIGravityBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">gravity</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="bp">UICollisionBehavior</span> <span class="o">*</span><span class="n">collision</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UICollisionBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'>  <span class="n">collision</span><span class="p">.</span><span class="n">translatesReferenceBoundsIntoBoundary</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="n">collision</span><span class="p">.</span><span class="n">collisionDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">collision</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="bp">UICollisionBehaviorDelegate</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">beganContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span> <span class="nl">atPoint</span><span class="p">:(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="n">p</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 结束碰撞为 squareView 设置一个随机背景</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">green</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                     <span class="nl">blue</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">endedContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 结束碰撞为 squareView 设置一个随机背景</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">green</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                     <span class="nl">blue</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>现在运行项目将会看到如下效果：</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-collision-delegate.gif" alt="collision delegate" /></p>

<h3>UIAttachmentBehavior</h3>

<p>附着行为，让物体附着在某个点或另外一个物体上。可以设置附着点的到物体的距离，阻尼系数和振动频率等。</p>

<p>在 ViewController.m 的 <code>- (void)viewDidAppear:(BOOL)animated</code> 末尾添加如下代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIAttachmentBehavior</span> <span class="o">*</span><span class="n">attachment</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAttachmentBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span> <span class="nl">attachedToAnchor</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">center</span><span class="p">];</span>
</span><span class='line'><span class="n">attachment</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'><span class="n">attachment</span><span class="p">.</span><span class="n">damping</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'><span class="n">attachment</span><span class="p">.</span><span class="n">frequency</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">attachment</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>运行项目看到效果：</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-attachment.gif" alt="attachment" /></p>

<p><strong>属性详细说明</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// UIAttachmentBehaviorTypeAnchor类型的依赖行为的锚点，锚点与行为相关的动力动画的坐标系统有关。</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGPoint</span> <span class="n">anchorPoint</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 吸附行为的类型</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">readonly</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">UIAttachmentBehaviorType</span> <span class="n">attachedBehaviorType</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 描述吸附行为减弱的阻力大小</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">damping</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 吸附行为震荡的频率</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">frequency</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 与吸附行为相连的动态项目，当吸附行为类型是UIAttachmentBehaviorTypeItems时有2个元素，当吸附行为类型是UIAttachmentBehaviorTypeAnchor时只有一个元素。</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">,</span> <span class="k">copy</span><span class="p">)</span> <span class="bp">NSArray</span> <span class="o">*</span><span class="n">items</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 吸附行为中的两个吸附点之间的距离，通常用这个属性来调整吸附的长度，可以创建吸附行为之后调用。系统基于你创建吸附行为的方法来自动初始化这个长度</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">length</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>UIDynamicItemBehavior</h3>

<p>物体属性，如密度、弹性系数、摩擦系数、阻力、转动阻力等。</p>

<p>接下来我们修改物体的物理属性，为了能看到这个效果，我们先删除 UIAttachmentBehavior 相关的代码，并在<code>- (void)viewDidAppear:(BOOL)animated</code> 末尾添加如下代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIDynamicItemBehavior</span> <span class="o">*</span><span class="n">itemBehavior</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDynamicItemBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'><span class="n">itemBehavior</span><span class="p">.</span><span class="n">elasticity</span> <span class="o">=</span> <span class="mf">0.8</span><span class="p">;</span> <span class="c1">// 改变弹性</span>
</span><span class='line'><span class="n">itemBehavior</span><span class="p">.</span><span class="n">allowsRotation</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span> <span class="c1">// 允许旋转</span>
</span><span class='line'><span class="p">[</span><span class="n">itemBehavior</span> <span class="nl">addAngularVelocity</span><span class="p">:</span><span class="mi">1</span> <span class="nl">forItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">];</span> <span class="c1">// 让物体旋转&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">itemBehavior</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>现在我们看到，方块的弹性变大了，并且伴随着旋转：</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-item.gif" alt="item behavior" /></p>

<p><strong>属性详细说明</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 弹力，通常设置 0~1 之间</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">elasticity</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 摩擦力，0表示完全光滑无摩擦</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">friction</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 密度，一个 100x100 points（1 point 在 retina 屏幕上等于2像素，在普通屏幕上为1像素。）大小的物体，密度1.0，在上面施加 1.0 的力，会产生 100 point/平方秒 的加速度。</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">density</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 线性阻力，物体在移动过程中受到的阻力大小</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">resistance</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 旋转阻力，物体旋转过程中的阻力大小</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">angularResistance</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 是否允许旋转</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">allowsRotation</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>UIPushBehavior</h3>

<p>对物体施加力，可以是持续性的力也可以是一次性的力。用一个向量(CGVector)来表示力的方向和大小。</p>

<p>这次我们通过手势来动态的为物体添加推力，首先注释重力行为的相关代码，然后在<code>- (void)viewDidAppear:(BOOL)animated</code> 末尾添加如下代码：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">viewTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">tapViewHandler</span><span class="p">:)];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">viewTapGesture</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>在ViewController.m中添加方法：
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">tapViewHandler</span><span class="p">:(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">UIPushBehavior</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">push</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPushBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span> <span class="nl">mode</span><span class="p">:</span><span class="n">UIPushBehaviorModeInstantaneous</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">CGPoint</span> <span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">gestureRecognizer</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">CGPoint</span> <span class="n">itemCenter</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="n">push</span><span class="p">.</span><span class="n">pushDirection</span> <span class="o">=</span> <span class="n">CGVectorMake</span><span class="p">((</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">itemCenter</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">itemCenter</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">push</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>上面代码会根据手指点击，生成一个由物体中心点指向点击位置的点的向量，通过设置UIPushBehavior的pushDirection让物体产生一个推向点击点的力。说得有点抽象，看看现实效果</p>

<p><img src="/images/posts/2014-03-08-uikit-dynamic-push.gif" alt="push behavior" /></p>

<p><strong>主要的属性和方法</strong>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 推力模式，UIPushBehaviorModeContinuous：持续型。UIPushBehaviorModeInstantaneous：一次性推力。</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readonly</span><span class="p">)</span> <span class="n">UIPushBehaviorMode</span> <span class="n">mode</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 推力是否被激活，在激活状态下，物体才会受到推力效果</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">readwrite</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">active</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 推力的大小和方向</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readwrite</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGVector</span> <span class="n">pushDirection</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>UISnapBehavior</h3>

<p>将一个物体钉在某一点。它只有一个初始化方法和一个属性。</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 根据 item 和 point 来确定一个 item 要被定到哪个点上。</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithItem:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">item</span> <span class="nf">snapToPoint:</span><span class="p">(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="nv">point</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// 减震系数，范围在0.0~1.0</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">damping</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这个就留给大家自己实验了。XD</p>

<h2>Demo</h2>

<p>整个 Demo 的代码：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="bp">UICollisionBehaviorDelegate</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIView</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">squareView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">strong</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIDynamicAnimator</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">animator</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">ViewController</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)];</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">orangeColor</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDynamicAnimator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithReferenceView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">viewDidAppear</span><span class="p">:(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="c1">//    UIGravityBehavior *gravity = [[UIGravityBehavior alloc] initWithItems:@[self.squareView]];</span>
</span><span class='line'><span class="c1">//    [self.animator addBehavior:gravity];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="bp">UICollisionBehavior</span> <span class="o">*</span><span class="n">collision</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UICollisionBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'>  <span class="n">collision</span><span class="p">.</span><span class="n">translatesReferenceBoundsIntoBoundary</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="n">collision</span><span class="p">.</span><span class="n">collisionDelegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">collision</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// 吸附于某一点，也可以吸附与某个实现了 UIDynamicItem 的对象</span>
</span><span class='line'><span class="c1">//    UIAttachmentBehavior *attachment = [[UIAttachmentBehavior alloc] initWithItem:self.squareView attachedToAnchor:self.squareView.center];</span>
</span><span class='line'><span class="c1">//    attachment.length = 50;</span>
</span><span class='line'><span class="c1">//    attachment.damping = 0.5;</span>
</span><span class='line'><span class="c1">//    attachment.frequency = 1;</span>
</span><span class='line'><span class="c1">//    [self.animator addBehavior:attachment];</span>
</span><span class='line'><span class="c1">//    [self addViewAtPoint:self.squareView.center];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// 物体属性：质量、摩擦、阻力等</span>
</span><span class='line'>  <span class="bp">UIDynamicItemBehavior</span> <span class="o">*</span><span class="n">itemBehavior</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIDynamicItemBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span><span class="p">];</span>
</span><span class='line'>  <span class="n">itemBehavior</span><span class="p">.</span><span class="n">elasticity</span> <span class="o">=</span> <span class="mf">0.8</span><span class="p">;</span>
</span><span class='line'>  <span class="n">itemBehavior</span><span class="p">.</span><span class="n">allowsRotation</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="n">itemBehavior</span><span class="p">.</span><span class="n">resistance</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="n">itemBehavior</span> <span class="nl">addAngularVelocity</span><span class="p">:</span><span class="mi">1</span> <span class="nl">forItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">itemBehavior</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="bp">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">viewTapGesture</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget</span><span class="p">:</span><span class="nb">self</span> <span class="nl">action</span><span class="p">:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">tapViewHandler</span><span class="p">:)];</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer</span><span class="p">:</span><span class="n">viewTapGesture</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">tapViewHandler</span><span class="p">:(</span><span class="bp">UITapGestureRecognizer</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">gestureRecognizer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">UIPushBehavior</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">push</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIPushBehavior</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="l">@[</span><span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="l">]</span> <span class="nl">mode</span><span class="p">:</span><span class="n">UIPushBehaviorModeInstantaneous</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">CGPoint</span> <span class="n">location</span> <span class="o">=</span> <span class="p">[</span><span class="n">gestureRecognizer</span> <span class="nl">locationInView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>  <span class="bp">CGPoint</span> <span class="n">itemCenter</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="n">push</span><span class="p">.</span><span class="n">pushDirection</span> <span class="o">=</span> <span class="n">CGVectorMake</span><span class="p">((</span><span class="n">location</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">itemCenter</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">,</span> <span class="p">(</span><span class="n">location</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">itemCenter</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">animator</span> <span class="nl">addBehavior</span><span class="p">:</span><span class="n">push</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="n">Helper</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">addViewAtPoint</span><span class="p">:(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="n">center</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="bp">UIView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)];</span>
</span><span class='line'>  <span class="n">view</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">grayColor</span><span class="p">];</span>
</span><span class='line'>  <span class="n">view</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="n">center</span><span class="p">;</span>
</span><span class='line'>  <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="o">-</span> <span class="bp">UICollisionBehaviorDelegate</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">beganContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span> <span class="nl">atPoint</span><span class="p">:(</span><span class="bp">CGPoint</span><span class="p">)</span><span class="n">p</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">green</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                     <span class="nl">blue</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">collisionBehavior</span><span class="p">:(</span><span class="bp">UICollisionBehavior</span><span class="o">*</span><span class="p">)</span><span class="n">behavior</span> <span class="nl">endedContactForItem</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">UIDynamicItem</span><span class="o">&gt;</span><span class="p">)</span><span class="n">item</span> <span class="nl">withBoundaryIdentifier</span><span class="p">:(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="bp">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="n">identifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">self</span><span class="p">.</span><span class="n">squareView</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="nl">colorWithRed</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">green</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                     <span class="nl">blue</span><span class="p">:(</span><span class="kt">float</span><span class="p">)</span><span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="n">RAND_MAX</span>
</span><span class='line'>                                                    <span class="nl">alpha</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>现实中的使用场景</h2>

<ul>
<li>AlertView 弹出和隐藏</li>
</ul>


<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/alertView.gif" alt="alertview" /></p>

<p>图片来自<a href="http://www.teehanlax.com/blog/introduction-to-uikit-dynamics/">teehan+lax</a></p>

<ul>
<li>类似于系统通知的弹性效果，侧边栏菜单弹性效果</li>
</ul>


<p><img src="http://teehanlax.com.s3.amazonaws.com/wordpress/wp-content/uploads/buttonBounce.gif" alt="slide menu" /></p>

<p>图片来自<a href="http://www.teehanlax.com/blog/introduction-to-uikit-dynamics/">teehan+lax</a></p>

<ul>
<li>类似于系统 Message 信息拉动时的弹簧效果</li>
</ul>


<p><img src="http://www.objc.io/images/issue-5/springyCollectionView.gif" alt="spring collection view" /></p>

<p>图片来自<a href="http://www.objc.io/issue-5/collection-views-and-uidynamics.html">obj.io</a></p>

<ul>
<li>还有很多使用场景期待大家共同挖掘补充</li>
</ul>


<h2>总结</h2>

<p>UIKit Dynamic 为开发者提供了模拟现实的交互动画。</p>

<p>从例子中来看，使用 UIKit Dynamic 实际上真的很简单，只需要几行或者十几行代码就能写出很棒的模拟真实世界的交互效果。</p>

<p>UIKit Dynamic 是 UIKit 的一部分，这意味着使用它不需要添加其它额外的framework，所以如果应用只支持 iOS 7 以上，可以在项目中多多使用，让应用中的动画效果瞬间提升好几个档次。</p>

<h2>参考</h2>

<p>2013 WWDC</p>

<ul>
<li><a href="https://developer.apple.com/wwdc/videos/index.php?id=206">WWDC 2013 206: Getting Started with UIKit Dynamics</a></li>
<li><a href="https://developer.apple.com/wwdc/videos/index.php?id=206">WWDC 2013 221: Advanced Techniques with UIKit Dynamics</a></li>
</ul>


<p>Blog</p>

<ul>
<li><a href="http://www.shinobicontrols.com/blog/posts/2013/09/19/ios7-day-by-day-day-0-uikit-dynamics">iOS7 Day-by-Day :: Day 0 :: UIKit Dynamics</a></li>
<li><a href="http://www.raywenderlich.com/zh-hans/52617/uikit-%E5%8A%9B%E5%AD%A6%E6%95%99%E7%A8%8B">UIKit 力学教程</a></li>
<li><a href="http://www.teehanlax.com/blog/introduction-to-uikit-dynamics/">Introduction to UIKit Dynamics</a></li>
<li><a href="http://www.objc.io/issue-5/collection-views-and-uidynamics.html">UICollectionView + UIKit Dynamics</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
